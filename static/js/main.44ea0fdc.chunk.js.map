{"version":3,"sources":["containers/Login/Login.module.scss","containers/News/News.module.scss","containers/AddNews/AddNews.module.scss","utils/index.js","store/authentication/actionType.js","store/authentication/reducer.js","store/news/reducer.js","store/news/actionType.js","utils/api/index.js","store/authentication/action.js","store/news/action.js","containers/Login/Login.js","components/Header/Header.js","containers/News/News.js","containers/AddNews/AddNews.js","page/Routers.js","serviceWorker.js","index.js","store/rootReducer.js"],"names":["module","exports","nameStore","data","window","localStorage","setItem","JSON","stringify","e","Error","FETCH_LOGIN","LOGOUT","SHOW_SPINNER","HIDE_SPINNER","IS_AUTH_REDUX","initState","isAuth","getItem","parse","utils","isSpinner","errorMessage","authentication","state","action","type","payload","initialState","news","addNews","editNews","deleteNews","id","filter","item","newsId","length","editDate","Date","toISOString","Number","oldNews","api","login","password","Promise","resolve","reject","setTimeout","fetchLogin","dispatch","a","showSpnner","hideSpnner","logout","layout","labelCol","span","wrapperCol","tailLayout","offset","connect","auth","authActions","to","className","s","Alert","message","closable","style","widtch","FormWrapper","spinning","delay","name","initialValues","remember","onFinish","values","onFinishFailed","errorInfo","console","log","Item","label","initialValue","rules","required","Password","htmlType","Header","Menu","SubMenu","useState","current","setCurrent","onClick","key","selectedKeys","mode","icon","MailOutlined","AppstoreOutlined","float","Meta","Card","newsActions","CardNews","width","margin","cover","alt","src","actions","DeleteOutlined","EditOutlined","title","description","descriptions","NewsWrapper","map","idx","getBase64","file","reader","FileReader","readAsDataURL","onload","result","onerror","error","getNews","queryId","useParams","Form","useForm","form","previewImage","setPreviewImage","fileList","useEffect","resetFields","handleChange","url","preview","originFileObj","uploadButton","PlusOutlined","openNotification","notification","open","AddNewsWrapper","TextArea","listType","onChange","basename","exact","from","path","render","Boolean","location","hostname","match","history","createBrowserHistory","middleware","thunk","routerMiddleware","store","createStore","combineReducers","router","connectRouter","compose","applyMiddleware","subscribe","getState","authActionTypes","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.44ea0fdc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormWrapper\":\"Login_FormWrapper__3ucO1\",\"Alert\":\"Login_Alert__p9Y5l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewsWrapper\":\"News_NewsWrapper__2BZe1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddNewsWrapper\":\"AddNews_AddNewsWrapper__1Cdsa\"};","const minCountSymbol = (str = '', count = 3) => str.length >= count\r\n\r\nconst validateEmail = (email = '', minSymbol = 3) => {\r\n    const re = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/\r\n    return (\r\n        minCountSymbol(email, minSymbol) && re.test(String(email).toLowerCase())\r\n    )\r\n}\r\n\r\nconst loadFromLocalStorege = (nameStore) => {\r\n    try {\r\n        const data = window.localStorage.getItem(nameStore)\r\n        return JSON.parse(data)\r\n    } catch (e) {\r\n        return {}\r\n    }\r\n}\r\n\r\nconst saveToLocalStorege = (nameStore, data) => {\r\n    try {\r\n        window.localStorage.setItem(nameStore, JSON.stringify(data))\r\n    } catch (e) {\r\n        throw Error(e)\r\n    }\r\n}\r\n\r\nexport default {\r\n    validation: {\r\n        email: validateEmail,\r\n    },\r\n    saveToLocalStorege,\r\n    loadFromLocalStorege,\r\n}\r\n","export const FETCH_LOGIN = 'FETCH_LOGIN'\r\nexport const LOGOUT = 'LOGOUT'\r\nexport const SHOW_SPINNER = 'SHOW_SPINNER'\r\nexport const HIDE_SPINNER = 'HIDE_SPINNER'\r\nexport const IS_AUTH_REDUX = 'IS_AUTH_REDUX'\r\n","import utils from '@utils'\r\nimport {\r\n    FETCH_LOGIN,\r\n    SHOW_SPINNER,\r\n    HIDE_SPINNER,\r\n    IS_AUTH_REDUX,\r\n    LOGOUT,\r\n} from './actionType'\r\n\r\nconst isAuth = !!utils.loadFromLocalStorege(IS_AUTH_REDUX)\r\n\r\nconst initState = {\r\n    isAuth,\r\n    isSpinner: false,\r\n    errorMessage: '',\r\n}\r\n\r\nexport default function authentication(state = initState, action) {\r\n    switch (action.type) {\r\n        case FETCH_LOGIN:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuth: action.payload.authentication,\r\n            }\r\n        case LOGOUT:\r\n            return {\r\n                ...state,\r\n                isAuth: false,\r\n            }\r\n        case SHOW_SPINNER:\r\n            return {\r\n                ...state,\r\n                isSpinner: true,\r\n            }\r\n        case HIDE_SPINNER:\r\n            return {\r\n                ...state,\r\n                isSpinner: false,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { DELETE_NEWS, ADD_NEWS, EDIT_NEWS } from './actionType'\r\n\r\nconst initialState = []\r\n\r\nexport default function news(state = initialState, action) {\r\n    switch (action.type) {\r\n        case ADD_NEWS:\r\n            return addNews(state, action.payload)\r\n        case EDIT_NEWS:\r\n            return editNews(state, action.payload)\r\n        case DELETE_NEWS:\r\n            return deleteNews(state, action.payload.id)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const deleteNews = (state, id) => {\r\n    return [...state.filter((item) => item.id !== id)]\r\n}\r\n\r\nexport const addNews = (state, news) => {\r\n    const newsId = state.length\r\n    return [\r\n        ...state,\r\n        {\r\n            ...news,\r\n            id: newsId,\r\n            editDate: new Date().toISOString(),\r\n        },\r\n    ]\r\n}\r\n\r\nexport const editNews = (state, news) => {\r\n    const id = Number(news.id)\r\n    const oldNews = deleteNews(state, id)\r\n    return [\r\n        ...oldNews,\r\n        {\r\n            ...news,\r\n            id,\r\n            editDate: new Date().toISOString(),\r\n        },\r\n    ]\r\n}\r\n","export const DELETE_NEWS = 'DELETE_NEWS'\r\nexport const EDIT_NEWS = 'EDIT_NEWS'\r\nexport const ADD_NEWS = 'ADD_NEWS'\r\n","import axios from 'axios'\r\n\r\nconst LOGIN = 'test@gmail.com'\r\nconst PASSWORD = '123456789'\r\n\r\nconst login = ({ login, password }) => {\r\n    //эмуляция работы с сервером авторизации\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            const isAuth = login === LOGIN && password === PASSWORD\r\n            resolve({\r\n                authentication: isAuth,\r\n                errorMessage: isAuth ? '' : 'wrong login or password',\r\n            })\r\n        }, 2000)\r\n    })\r\n}\r\n\r\nconst api = {\r\n    login,\r\n}\r\n\r\nexport default api\r\n","import { FETCH_LOGIN, SHOW_SPINNER, HIDE_SPINNER, LOGOUT } from './actionType'\r\n\r\nimport api from '@api'\r\n\r\nexport const fetchLogin = ({ login, password }) => async (dispatch) => {\r\n    const data = await api.login({ login, password })\r\n    dispatch({\r\n        type: FETCH_LOGIN,\r\n        payload: data,\r\n    })\r\n    dispatch({ type: HIDE_SPINNER })\r\n}\r\n\r\nexport const showSpnner = () => (dispatch) => dispatch({ type: SHOW_SPINNER })\r\nexport const hideSpnner = () => (dispatch) => dispatch({ type: HIDE_SPINNER })\r\nexport const logout = () => (dispatch) => dispatch({ type: LOGOUT })\r\n","import { DELETE_NEWS, ADD_NEWS, EDIT_NEWS } from './actionType'\r\n\r\nexport const deleteNews = (id) => (dispatch) => {\r\n    dispatch({ type: DELETE_NEWS, payload: { id } })\r\n}\r\n\r\nexport const addNews = (news) => (dispatch) => {\r\n    dispatch({ type: ADD_NEWS, payload: news })\r\n}\r\nexport const editNews = (news) => (dispatch) => {\r\n    dispatch({ type: EDIT_NEWS, payload: news })\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { authActions } from '../../store/rootActions'\r\n\r\nimport { Form, Input, Button, Checkbox, Spin, Alert } from 'antd'\r\nimport s from './Login.module.scss'\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 8,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n}\r\n\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 8,\r\n        span: 16,\r\n    },\r\n}\r\n\r\nconst Login = ({ isAuth, isSpinner, errorMessage, fetchLogin, showSpnner }) => {\r\n    const onFinish = (values) => {\r\n        showSpnner()\r\n        fetchLogin(values)\r\n    }\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo)\r\n    }\r\n\r\n    if (isAuth) return <Redirect to={'/'} />\r\n\r\n    return (\r\n        <>\r\n            {errorMessage.length > 0 && !isSpinner && (\r\n                <div className={s.Alert}>\r\n                    <Alert\r\n                        message={errorMessage}\r\n                        type=\"error\"\r\n                        closable\r\n                        style={{ widtch: '500px' }}\r\n                    />\r\n                </div>\r\n            )}\r\n            <div className={s.FormWrapper}>\r\n                <Spin spinning={isSpinner} delay={500}>\r\n                    <Form\r\n                        {...layout}\r\n                        name=\"basic\"\r\n                        initialValues={{\r\n                            remember: true,\r\n                        }}\r\n                        onFinish={onFinish}\r\n                        onFinishFailed={onFinishFailed}\r\n                    >\r\n                        <Form.Item\r\n                            label=\"E-mail\"\r\n                            name=\"login\"\r\n                            initialValue={'test@gmail.com'}\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    type: 'email',\r\n                                    message: 'некорректный e-mail',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Пароль\"\r\n                            name=\"password\"\r\n                            initialValue={'123456789'}\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: 'Пожалуйста введите пароль!',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input.Password />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item {...tailLayout}>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Войти\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Spin>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nLogin.propTypes = {}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    isSpinner: state.auth.isSpinner,\r\n    errorMessage: state.auth.errorMessage,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    showSpnner: () => dispatch(authActions.showSpnner()),\r\n    fetchLogin: ({ login, password }) =>\r\n        dispatch(authActions.fetchLogin({ login, password })),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)\r\n","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { Menu } from 'antd'\r\nimport {\r\n    MailOutlined,\r\n    AppstoreOutlined,\r\n    SettingOutlined,\r\n} from '@ant-design/icons'\r\n\r\nconst { SubMenu } = Menu\r\n\r\nconst Header = ({ logout }) => {\r\n    const [current, setCurrent] = useState('news')\r\n\r\n    const handleClick = (e) => {\r\n        console.log('click ', e)\r\n        setCurrent({ current: e.key })\r\n    }\r\n\r\n    return (\r\n        <Menu onClick={handleClick} selectedKeys={[current]} mode=\"horizontal\">\r\n            <Menu.Item key=\"news\" icon={<MailOutlined />}>\r\n                <Link to={'/admin-panel/news'}>Просмотр новостей</Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"add\" icon={<AppstoreOutlined />}>\r\n                <Link to={'/admin-panel/add'}>Добавить новость</Link>\r\n            </Menu.Item>\r\n            <Menu.Item\r\n                key=\"logout\"\r\n                icon={<AppstoreOutlined />}\r\n                style={{ float: 'right' }}\r\n                onClick={logout}\r\n            >\r\n                <Link to={'/login'}>Выйти</Link>\r\n            </Menu.Item>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { newsActions } from '../../store/rootActions'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Card, Avatar } from 'antd'\r\nimport {\r\n    EditOutlined,\r\n    EllipsisOutlined,\r\n    SettingOutlined,\r\n    DeleteOutlined,\r\n} from '@ant-design/icons'\r\n\r\nimport s from './News.module.scss'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst { Meta } = Card\r\n\r\nconst News = ({ news, deleteNews }) => {\r\n    const handleDeleteNews = (id) => {\r\n        deleteNews(id)\r\n    }\r\n\r\n    const CardNews = ({ data }) => (\r\n        <Card\r\n            style={{ width: 300, margin: 5 }}\r\n            cover={<img alt=\"example\" src={data.src} />}\r\n            actions={[\r\n                <DeleteOutlined\r\n                    key=\"delete\"\r\n                    onClick={() => handleDeleteNews(data.id)}\r\n                />,\r\n\r\n                <Link to={`/admin-panel/edit/${data.id}`}>\r\n                    <EditOutlined key=\"edit\" />,\r\n                </Link>,\r\n            ]}\r\n        >\r\n            <Meta title={data.title} description={data.descriptions} />\r\n        </Card>\r\n    )\r\n    return (\r\n        <div className={s.NewsWrapper}>\r\n            {news.map((item, idx) => (\r\n                <CardNews key={item.id} data={item} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    news: state.news,\r\n})\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    deleteNews: (id) => dispatch(newsActions.deleteNews(id)),\r\n})\r\n\r\nNews.propTypes = {}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(News)\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport { newsActions } from '../../store/rootActions'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Form, Input, Button, Upload, Modal, notification } from 'antd'\r\nimport { UploadOutlined, InboxOutlined, PlusOutlined } from '@ant-design/icons'\r\nimport s from './AddNews.module.scss'\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 8,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 8,\r\n        span: 16,\r\n    },\r\n}\r\n\r\nfunction getBase64(file) {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader()\r\n        reader.readAsDataURL(file)\r\n        reader.onload = () => resolve(reader.result)\r\n        reader.onerror = (error) => reject(error)\r\n    })\r\n}\r\n\r\nconst AddNews = ({ getNews, addNews, editNews }) => {\r\n    const { id: queryId } = useParams()\r\n    const news = getNews(queryId) || {}\r\n\r\n    const [form] = Form.useForm()\r\n    const [previewImage, setPreviewImage] = useState(news.src || '')\r\n    const [fileList, setFileList] = useState([])\r\n\r\n    useEffect(() => {\r\n        if (!queryId) {\r\n            form.resetFields()\r\n            setPreviewImage('')\r\n        }\r\n    }, [queryId])\r\n\r\n    const onFinish = (values) => {\r\n        const title = queryId ? 'Новость отредактированна' : 'Новость добавлена'\r\n        if (queryId) {\r\n            editNews({ ...values, src: previewImage, id: queryId })\r\n        } else {\r\n            addNews({ ...values, src: previewImage })\r\n            setPreviewImage('')\r\n        }\r\n\r\n        form.resetFields()\r\n        openNotification(title)\r\n    }\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo)\r\n    }\r\n\r\n    const handleChange = async ({ file }) => {\r\n        if (!file.url && !file.preview) {\r\n            file.preview = await getBase64(file.originFileObj)\r\n        }\r\n        setPreviewImage(file.url || file.preview)\r\n    }\r\n\r\n    const uploadButton = (\r\n        <div>\r\n            <PlusOutlined />\r\n            <div className=\"ant-upload-text\">Добавить</div>\r\n        </div>\r\n    )\r\n\r\n    const openNotification = (title) => {\r\n        notification.open({\r\n            message: title,\r\n            onClick: () => {\r\n                console.log('Notification Clicked!')\r\n            },\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={s.AddNewsWrapper}>\r\n            <Form\r\n                {...layout}\r\n                form={form}\r\n                name=\"basic\"\r\n                initialValues={{\r\n                    remember: true,\r\n                }}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                style={{ width: '100%' }}\r\n            >\r\n                <Form.Item\r\n                    label=\"Заголовок\"\r\n                    name=\"title\"\r\n                    initialValue={news.title}\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Описание\"\r\n                    name=\"descriptions\"\r\n                    initialValue={news.descriptions}\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your password!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Картинка\">\r\n                    <Upload\r\n                        listType=\"picture-card\"\r\n                        fileList={fileList}\r\n                        onChange={handleChange}\r\n                    >\r\n                        {previewImage ? null : uploadButton}\r\n                    </Upload>\r\n                    {previewImage && (\r\n                        <img\r\n                            alt=\"example\"\r\n                            style={{ width: '100%' }}\r\n                            src={previewImage}\r\n                        />\r\n                    )}\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Сохранить\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getNews: (id) => state.news.filter((news) => news.id === Number(id))[0],\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addNews: ({ title, descriptions, src }) =>\r\n        dispatch(newsActions.addNews({ title, descriptions, src })),\r\n    editNews: ({ id, title, descriptions, src }) =>\r\n        dispatch(newsActions.editNews({ id, title, descriptions, src })),\r\n})\r\n\r\nAddNews.propTypes = {}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNews)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { authActions } from '../store/rootActions'\r\nimport { createBrowserHistory } from 'history'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Redirect,\r\n    Route,\r\n    Switch,\r\n    browserHistory,\r\n} from 'react-router-dom'\r\n\r\nimport utils from '@utils'\r\n\r\nimport Login from '../containers/Login'\r\nimport Header from '../components/Header'\r\nimport News from '../containers/News'\r\nimport AddNews from '../containers/AddNews'\r\n\r\nconst Routers = ({ isAuth, logout }) => {\r\n    const handleLogout = () => {\r\n        logout()\r\n    }\r\n\r\n    return (\r\n        <Router basename=\"/WhiteCodeDemo\">\r\n            {!isAuth && <Redirect to=\"/login\" />}\r\n\r\n            <Switch>\r\n                {isAuth && <Redirect exact from=\"/\" to=\"/admin-panel/news\" />}\r\n\r\n                <Route path={'/admin-panel'}>\r\n                    <Header logout={handleLogout} />\r\n                    <Switch>\r\n                        <Route\r\n                            path={'/admin-panel/news'}\r\n                            render={() => <News />}\r\n                        />\r\n                        <Route\r\n                            path={'/admin-panel/add'}\r\n                            render={() => <AddNews />}\r\n                        />\r\n                        <Route\r\n                            path={'/admin-panel/edit/:id'}\r\n                            render={() => <AddNews />}\r\n                        />\r\n                        <Route render={() => <div>not found</div>} />\r\n                    </Switch>\r\n                </Route>\r\n\r\n                <Route path={'/login'} render={() => <Login />} />\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    logout: () => dispatch(authActions.logout()),\r\n})\r\n\r\nRouters.propTypes = {\r\n    isAuth: PropTypes.bool,\r\n    logout: PropTypes.func,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Routers)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport { ConnectedRouter, routerMiddleware } from 'connected-react-router'\r\nimport { createBrowserHistory } from 'history'\r\n\r\nimport { createStore, applyMiddleware, compose } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './store/rootReducer'\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport Routers from './page/Routers'\r\nimport { authActionTypes } from './store/rootActionTypes'\r\n\r\nimport utils from '@utils'\r\n\r\nimport 'antd/dist/antd.css'\r\nimport './assets/styles/index.scss'\r\n\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst history = createBrowserHistory()\r\nconst enhancers = []\r\nconst middleware = [thunk, routerMiddleware(history)]\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    enhancers.push(composeWithDevTools())\r\n}\r\n\r\nconst store = createStore(\r\n    rootReducer(history),\r\n    compose(applyMiddleware(...middleware), ...enhancers)\r\n)\r\n\r\nstore.subscribe(() => {\r\n    const { auth } = store.getState()\r\n    utils.saveToLocalStorege(authActionTypes.IS_AUTH_REDUX, auth.isAuth)\r\n})\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            <Routers />\r\n        </ConnectedRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import { combineReducers } from 'redux'\r\nimport { connectRouter } from 'connected-react-router'\r\n\r\nimport authentication from './authentication/reducer'\r\nimport news from './news/reducer'\r\n\r\nexport default (history) =>\r\n    combineReducers({\r\n        router: connectRouter(history),\r\n        auth: authentication,\r\n        news,\r\n    })\r\n"],"sourceRoot":""}